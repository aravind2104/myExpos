breakpoint;
//user stack to kernal stack -- backup
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP; //logical address
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1; 
//since kernel mode newly entered- Kernel stack is empty
backup;
//now play ahead with reg values


//get process id of current process
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 1];
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;
[process_table_entry + 4] = READY;

//scheduling algo
alias newPID R2;
if(currentPID == 0) then
	newPID =1;
else
	newPID =0;
endif;

//to check
print "TIMER";
//to check --end

//restore sp, ptbr, ptlr
alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID*16;
SP = [new_process_table + 11] * 512 + [new_process_table + 12];//kptr
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];
[SYSTEM_STATUS_TABLE + 1] = newPID;

if([new_process_table + 4] == CREATED) then //nothing to restore
	[new_process_table + 4] = RUNNING;
	SP = [new_process_table + 13];
	ireturn;
endif;
//else
[new_process_table + 4] = RUNNING; // initially ready state
restore;
//no more using registers

//kernel to user stack before exit 
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13];
breakpoint;
ireturn;
